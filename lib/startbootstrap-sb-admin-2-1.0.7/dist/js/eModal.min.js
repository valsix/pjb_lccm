/* ========================================================================
 * SaRibe: eModal.js v1.1.03
 * http://saribe.github.io/eModal
 * ========================================================================
 * Copyright Samuel Ribeiro.
 * Licensed under.
 * ======================================================================== */
(function(n) {
    n(["jquery"], function(n) {
        function w(u, f, e) {
            function s(n, i) {
                if (i === "error") {
                    var u = '<div class="alert alert-danger"><strong>XHR Fail: <\/strong>Url [ ' + o.url + "] load fail.<\/div>";
                    r(u, "Loading: " + o.title)
                } else o.callback && o.callback(t)
            }
            var o = {
                callback: u.callback || e,
                loading: !0,
                title: u.title || f || i.title,
                url: u.url || u
            };
            return u.url && n.extend(o, u), r(o, f).find("." + h).load(o.url, s).closest(".modal-dialog")
        }

        function r(t, i) {
            ft(t, i);
            var r = n(e).append(ut(t), a(t.buttons));
            return it(r, t)
        }

        function b(t, i, f) {
            function o(i) {
                var r = t.callback || f,
                    o;
                if (u(), typeof r == "function") return o = n(i.currentTarget).html(), r(e[o] ? !0 : !1);
                throw new Error("No callback provided to execute confim modal action.");
            }
            var e = {
                    OK: "Cancel",
                    True: "False",
                    Yes: "No"
                },
                s = "OK";
            return r({
                buttons: [{
                    close: !0,
                    click: o,
                    text: e[t.label] ? e[t.label] : e[s],
                    style: "danger"
                }, {
                    close: !0,
                    click: o,
                    text: e[t.label] ? t.label : s
                }],
                message: t.message || t,
                onHide: o,
                size: t.size,
                title: t.title || i
            })
        }

        function k(t, u, f) {
            function s() {
                n(this).parent().find("div").fadeOut(function() {
                    n(this).remove()
                });
                f = t.callback || f;
                typeof f == "function" && f(e)
            }
            var o = '<div class=modal-body style="position: absolute;width: 100%;background-color: rgba(255,255,255,0.8);height: 100%;">%1%<\/div><iframe class="embed-responsive-item" src="%0%" style="width:100%;height:75vh;"/>'.replace("%0%", t.message || t.url || t).replace("%1%", i.loadingHtml),
                e = n(o).load(s);
            return r({
                buttons: t.buttons || !1,
                message: e,
                size: t.size || l.lg,
                title: t.title || u
            })
        }

        function d() {
            return n("#" + f + " > *").remove()
        }

        function g(i, f, e) {
            function v(i) {
                var r = o.callback || e;
                if (u(), typeof r == "function") return r(n(i.currentTarget).html() === "Cancel" ? null : t.find("input").val());
                throw new Error("No callback provided to execute prompt modal action.");
            }
            var o = {},
                s, h, c, l;
            if (typeof i == "object" ? n.extend(o, i) : (o.callback = e, o.message = i, o.title = f), o.buttons)
                for (h = 0, c = o.buttons.length; h < c; h++) s = o.buttons[h], s.style = s.style ? s.style + " pull-left" : "default pull-left", s.type = s.type || "button";
            return l = a([{
                close: !0,
                type: "reset",
                text: "Cancel",
                style: "danger"
            }, {
                close: !1,
                type: "submit",
                text: "OK"
            }].concat(o.buttons || [])), o.buttons = !1, o.onHide = v, o.message = n('<form role=form style="margin-bottom:0;"><div class=modal-body><label for=prompt-input class=control-label>' + (o.message || "") + '<\/label><input type=text class=form-control id=prompt-input required autofocus value="' + (o.value || "") + (o.pattern ? '" pattern="' + o.pattern : "") + '"><\/div><\/form>').append(l).on("submit", v), r(o)
        }

        function nt(t) {
            return n.extend(i, t)
        }

        function tt(i) {
            return t && t.remove(), n.extend(c, i)
        }

        function u() {
            return t && t.off("hide.bs.modal").modal("hide"), t
        }

        function it(n) {
            return t.find(".modal-content").append(n), t.modal(c)
        }

        function rt() {
            function i() {
                return n('<div class="modal fade" tabindex="-1"><div class=modal-dialog><div class=modal-content> <div class=modal-header><button type=button class="x close" data-dismiss=modal><span aria-hidden=true>&times;<\/span><span class=sr-only>Close<\/span><\/button><h4 class=modal-title><\/h4><\/div><\/div><\/div><\/div>').on("hidden.bs.modal", v).on("click", "button.x", function(i) {
                //return n('<div class="modal fade" tabindex="-1"><div class=modal-dialog><div class=modal-content> <div class=modal-header hidden=true><h4 class=modal-title><\/h4><\/div><button type=button class="x close" data-dismiss=modal><span aria-hidden=true>&times;<\/span><span class=sr-only>Close<\/span><\/button><\/div><\/div><\/div>').on("hidden.bs.modal", v).on("click", "button.x", function(i) {
                    var r = n(i.currentTarget);
                    if (r.prop("type") !== "submit") return t.modal("hide");
                    try {
                        if (r.closest("form")[0].checkValidity()) return u()
                    } catch (f) {
                        return u()
                    }
                    return t
                })
            }
            return t || (document.getElementById(f) || n("body").append(n(e).prop("id", f).hide()), t = i()), t
        }

        function a(t) {
            var f, o, s, i, u, r;
            if (t === !1) return "";
            if (f = n(e).addClass("modal-footer").prop("id", y), t)
                for (o = 0, s = t.length; o < s; o++) {
                    i = t[o];
                    u = n("<button>").addClass("btn btn-" + (i.style || "info"));
                    for (r in i)
                        if (i.hasOwnProperty(r)) switch (r) {
                            case "close":
                                i[r] && u.attr("data-dismiss", "modal").addClass("x");
                                break;
                            case "click":
                                u.click(i.click);
                                break;
                            case "text":
                                u.html(i[r]);
                                break;
                            default:
                                u.attr(r, i[r])
                        }
                        f.append(u)
                } else f.append('<button class="x btn btn-info" data-dismiss=modal type=button>Close<\/button>');
            return f
        }

        function ut(t) {
            var r, u = t.loading ? i.loadingHtml : t.message || t;
            return u.on || u.onclick ? (r = t.clone === !0 ? n(u).clone() : n(u), r.addClass(t.useBin && !t.loading ? o : p)) : r = n(e).addClass(h).html(u), t.css && t.css !== r.css && r.css(t.css), r
        }

        function v() {
            if (!t) return t;
            var n = t.find("." + o).removeClass(o).appendTo("#" + f);
            return t.off("hide.bs.modal").find(".modal-content > div:not(:first-child)").remove(), (!i.allowContentRecycle || s.clone) && n.remove(), t
        }

        function ft(t, r) {
            if (!t) throw new Error("Invalid parameters!");
            v();
            s = t;
            var u = rt();
			u.find(".modal-dialog").removeClass("modal-sm modal-lg modal-kk").addClass(t.size ? "modal-" + t.size : i.size);
            //u.find(".modal-dialog").css({"width":t.title}); //.addClass(t.size ? "modal-" + t.size : i.size);
            u.find(".modal-title").html((t.title || r || i.title) + " ").append(n("<small>").html(t.subtitle || ""));
            u.on("hide.bs.modal", t.onHide);
            return u
        }
        var i = {
                allowContentRecycle: !0,
                size: "",
                loadingHtml: '<h5>Loading...<\/h5><div class=progress><div class="progress-bar progress-bar-striped active" role=progressbar aria-valuenow=100 aria-valuemin=0 aria-valuemax=100 style="width: 100%"><span class=sr-only>100% Complete<\/span><\/div><\/div>',
                title: "Attention"
            },
            t, f = "recycle-bin",
            e = '<div style="position: relative;word-wrap:break-word;">',
            y = "eModalFooter",
            s = {},
            h = "modal-body",
            c = {},
            o = "rec-modal-content",
            l = {
                sm: "sm",
                lg: "lg",
				kk: "kk"
            },
            p = "tmp-modal-content";
        return {
            ajax: w,
            alert: r,
            close: u,
            confirm: b,
            emptyBin: d,
            iframe: k,
            prompt: g,
            setEModalOptions: nt,
            setModalOptions: tt,
            size: l,
            version: "1.1.03"
        }
    })
})(typeof define == "function" && define.amd ? define : function(n, t) {
    typeof module != "undefined" && window.module.exports ? window.module.exports = t(window.require(n[0])) : window.eModal = t(window.jQuery)
});