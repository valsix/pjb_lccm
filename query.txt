UPDATE public.pengguna_modul
	SET  menu_modul='Setting Peran'
	WHERE kode_modul='0801';

    ALTER TABLE public.log_generate
    ADD COLUMN berhasil_generate character varying ;
    
    ALTER TABLE public.log_generate
    ADD COLUMN gagal_generate character varying ;

CREATE TABLE IF NOT EXISTS public.pengguna_hak_distrik
(
    pengguna_hak_distrik_id numeric NOT NULL,
    pengguna_hak_id numeric,
    distrik_id numeric,
    status_all integer,
    last_create_user character varying COLLATE pg_catalog."default",
    last_create_date date,
    last_update_user character varying COLLATE pg_catalog."default",
    last_update_date date,
    CONSTRAINT pengguna_hak_distrik_pkey PRIMARY KEY (pengguna_hak_distrik_id)
);


CREATE OR REPLACE FUNCTION public.preparation_status_info()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
declare
    kode_distrik character varying;
    kode_blok character varying;
    kode_unit_m character varying;
    year_lccm integer;
    wo_cr boolean;
    wo_standing boolean;
    wo_pm boolean;
    wo_pdm boolean;
    wo_oh boolean;
    prk boolean;
    loss_output boolean;
    energy_price boolean;
    operation boolean;
    status_complete boolean;
    
begin

    status_complete:= 'false';
    if new.wo_cr = 'true' 
    and new.wo_standing = 'true' 
    and new.wo_pm = 'true' 
    and new.wo_pdm = 'true' 
    and new.wo_oh = 'true' 
    and new.prk = 'true'
    and new.loss_output = 'true'
    and new.energy_price = 'true'
    and new.operation = 'true'
    then
        status_complete:= 'true';
        else
        status_complete:= 'false';
    end if;
   -- raise notice 'sql %',status_complete;
    new.status_complete:= status_complete;

  return new;
   
end;
$BODY$;

ALTER FUNCTION public.preparation_status_info()
    OWNER TO postgres;



CREATE TRIGGER tpreparation_status_info
    BEFORE INSERT OR UPDATE 
    ON public.t_preperation_lccm
    FOR EACH ROW
    EXECUTE PROCEDURE public.preparation_status_info();


    ALTER TABLE public.pengguna
    ADD COLUMN nid character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN nama_lengkap character varying;
    
    ALTER TABLE public.pengguna
    ADD COLUMN occup_status character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_bagian character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN bagian character varying ;
    
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_ditbid character varying; 
    
    ALTER TABLE public.pengguna
    ADD COLUMN ditbid character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_unit character varying ;
    
    
    ALTER TABLE public.pengguna
    ADD COLUMN unit character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_klasifikasi_unit character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN klasifikasi_unit character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN position_id character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN nama_posisi character varying ;


    ALTER TABLE pengguna 
    ALTER COLUMN username DROP NOT NULL;


    ALTER TABLE public.pengguna
    ADD COLUMN expired_date date;

    ALTER TABLE public.pengguna
    ADD COLUMN no_telp numeric;

    ALTER TABLE public.pengguna
    ADD COLUMN distrik_id numeric;

    ALTER TABLE public.pengguna
    ADD COLUMN perusahaan_eksternal_id numeric;

    ALTER TABLE public.pengguna
    ADD COLUMN kode_distrik character varying(8) ;
    ALTER TABLE public.pengguna
    ADD COLUMN kode_blok character varying(8) ;
    ALTER TABLE public.pengguna
    ADD COLUMN kode_unit_m character varying(8) ;

    ALTER TABLE pengguna ADD CONSTRAINT pengguna_nid_u UNIQUE (nid);


    -- check dulu apakah ada data duplikat nid/username

    select nid, count(*)
    from pengguna
    group by nid
    HAVING count(*) > 1


    delete from pengguna pl
    where exists
    (
      select null
      from pengguna pl2
      where pl2.nid = pl.nid
      and pl2.ctid > pl.ctid
    )


    ALTER TABLE public.pengguna
    ADD COLUMN master_pass character varying ;

    ALTER TABLE pengguna ALTER COLUMN foto TYPE text;


    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('CI', 'Combustor Inspection');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('TI', 'Turbine Inspection');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('MI', 'Major Inspection');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('TO', 'Top Overhaul');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('SO', 'Semi Overhaul');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('MO', 'Major Overhaul');


    INSERT INTO public.pengguna_modul(
    kode_modul, menu_modul, link_modul, group_modul, order_modul, level_modul)
    VALUES ('0902', 'Project', 'project', 'DASHBOARD', 3, '09');



    CREATE FUNCTION public.pr_lccm_status_p()
        RETURNS trigger
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE NOT LEAKPROOF
    AS $BODY$
    BEGIN 
       INSERT INTO
            t_project_lccm_status(kode_distrik,kode_blok,kode_unit_m,siteid,project_name,project_param)
            VALUES(new.kode_distrik,new.kode_blok,new.kode_unit_m,new.siteid,new.project_name,2);

               RETURN new;
    END;
    $BODY$;

    ALTER FUNCTION public.pr_lccm_status_p()
        OWNER TO postgres;


    CREATE TRIGGER pr_lccm_status_t
    AFTER INSERT
    ON public.t_lccm_prj
    FOR EACH ROW
    EXECUTE PROCEDURE public.pr_lccm_status_p();



    create or replace function f_total_pm(KODE_DISTRIK_VAL varchar  = NULL, KODE_BLOK_VAL varchar  = NULL, KODE_UNIT_M_VAL varchar  = NULL, WO_PM_VAL integer default  NULL)
  returns table (WO_PM boolean, INFO_NAMA text, KODE_DISTRIK varchar, DISTRIK_INFO varchar, KODE_BLOK varchar, BLOK_INFO varchar, KODE_UNIT varchar, UNIT_INFO varchar, PM_YEAR int, GROUP_PM varchar, TOTAL_TAHUN bigint)
as
$BODY$
declare
  check_distrik text; 
  check_blok text;
  check_unit text;
  check_wo_pm text;
  query_text text;
  begin
  IF KODE_DISTRIK_VAL IS NOT NULL  
  THEN 
    check_distrik := ' AND B1.KODE_DISTRIK='''||$1||'''';
  END IF;
  IF KODE_BLOK_VAL IS NOT NULL  
  THEN 
    check_blok := ' AND B1.KODE_BLOK='''||$2||'''';
  END IF;
  IF KODE_UNIT_M_VAL IS NOT NULL  
  THEN 
    check_unit := ' AND B1.KODE_UNIT_M='''||$3||'''';
  END IF;
  IF WO_PM_VAL < 2  
  THEN 
    IF WO_PM_VAL = 1
    THEN 
    check_wo_pm := ' AND PC.WO_PM=true';
    elsif  WO_PM_VAL = 0
    then
    check_wo_pm := ' AND PC.WO_PM=false';
    END IF;
    else
    check_wo_pm := ' AND 1=1';
  END IF;
  query_text := 'SELECT
            PC.WO_PM
            , CASE WHEN PC.WO_PM = TRUE THEN ''Valid'' WHEN PC.WO_PM = FALSE THEN ''Tidak Valid'' ELSE ''-'' END INFO_NAMA
            , A.*
        FROM
        (
            SELECT 
                B.KODE_DISTRIK,C.NAMA DISTRIK_INFO,B.KODE_BLOK,D.NAMA BLOK_INFO,B.KODE_UNIT, D.NAMA UNIT_INFO,A.PM_YEAR,B.GROUP_PM, SUM(PM_IN_YEAR) TOTAL_TAHUN
            FROM t_wo_pm_lccm A
            LEFT JOIN M_ASSET_LCCM B1 ON trim(B1.ASSETNUM) = trim(A.ASSETNUM) 
            LEFT JOIN DISTRIK C ON C.KODE = B1.KODE_DISTRIK
            LEFT JOIN BLOK_UNIT D ON D.KODE = B1.KODE_BLOK AND D.DISTRIK_ID = C.DISTRIK_ID
            LEFT JOIN UNIT_MESIN E ON E.KODE = B1.KODE_UNIT_M AND E.BLOK_UNIT_ID = D.BLOK_UNIT_ID AND E.DISTRIK_ID = C.DISTRIK_ID
            LEFT JOIN m_group_pm__lccm B ON B.KODE_DISTRIK = C.KODE AND B.KODE_BLOK = D.KODE AND B.KODE_UNIT = E.KODE
            where 1=1
            '|| check_distrik || '
            '|| check_blok || '
            '|| check_unit || '
         GROUP BY A.PM_YEAR, B.GROUP_PM,B.KODE_DISTRIK,B.KODE_BLOK,B.KODE_UNIT,C.NAMA,D.NAMA,D.NAMA
        ) A
        LEFT JOIN t_preperation_lccm PC ON PC.YEAR_LCCM = A.PM_YEAR AND PC.KODE_DISTRIK = A.KODE_DISTRIK AND PC.KODE_BLOK = A.KODE_BLOK AND PC.KODE_UNIT_M = A.KODE_UNIT
        WHERE 1=1
        '|| check_wo_pm || '
        
        ORDER BY A.PM_YEAR ASC 
        ;';
raise notice '%', query_text;
RETURN QUERY EXECUTE query_text;
   
END;        
$BODY$

 LANGUAGE plpgsql VOLATILE
  COST 100;

    
    

