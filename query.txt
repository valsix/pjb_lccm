UPDATE public.pengguna_modul
	SET  menu_modul='Setting Peran'
	WHERE kode_modul='0801';

    ALTER TABLE public.log_generate
    ADD COLUMN berhasil_generate character varying ;
    
    ALTER TABLE public.log_generate
    ADD COLUMN gagal_generate character varying ;

CREATE TABLE IF NOT EXISTS public.pengguna_hak_distrik
(
    pengguna_hak_distrik_id numeric NOT NULL,
    pengguna_hak_id numeric,
    distrik_id numeric,
    status_all integer,
    last_create_user character varying COLLATE pg_catalog."default",
    last_create_date date,
    last_update_user character varying COLLATE pg_catalog."default",
    last_update_date date,
    CONSTRAINT pengguna_hak_distrik_pkey PRIMARY KEY (pengguna_hak_distrik_id)
);


CREATE OR REPLACE FUNCTION public.preparation_status_info()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
declare
    kode_distrik character varying;
    kode_blok character varying;
    kode_unit_m character varying;
    year_lccm integer;
    wo_cr boolean;
    wo_standing boolean;
    wo_pm boolean;
    wo_pdm boolean;
    wo_oh boolean;
    prk boolean;
    loss_output boolean;
    energy_price boolean;
    operation boolean;
    status_complete boolean;
    
begin

    status_complete:= 'false';
    if new.wo_cr = 'true' 
    and new.wo_standing = 'true' 
    and new.wo_pm = 'true' 
    and new.wo_pdm = 'true' 
    and new.wo_oh = 'true' 
    and new.prk = 'true'
    and new.loss_output = 'true'
    and new.energy_price = 'true'
    and new.operation = 'true'
    then
        status_complete:= 'true';
        else
        status_complete:= 'false';
    end if;
   -- raise notice 'sql %',status_complete;
    new.status_complete:= status_complete;

  return new;
   
end;
$BODY$;

ALTER FUNCTION public.preparation_status_info()
    OWNER TO postgres;



CREATE TRIGGER tpreparation_status_info
    BEFORE INSERT OR UPDATE 
    ON public.t_preperation_lccm
    FOR EACH ROW
    EXECUTE PROCEDURE public.preparation_status_info();


    ALTER TABLE public.pengguna
    ADD COLUMN nid character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN nama_lengkap character varying;
    
    ALTER TABLE public.pengguna
    ADD COLUMN occup_status character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_bagian character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN bagian character varying ;
    
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_ditbid character varying; 
    
    ALTER TABLE public.pengguna
    ADD COLUMN ditbid character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_unit character varying ;
    
    
    ALTER TABLE public.pengguna
    ADD COLUMN unit character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN kode_klasifikasi_unit character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN klasifikasi_unit character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN position_id character varying ;
    
    ALTER TABLE public.pengguna
    ADD COLUMN nama_posisi character varying ;


    ALTER TABLE pengguna 
    ALTER COLUMN username DROP NOT NULL;


    ALTER TABLE public.pengguna
    ADD COLUMN expired_date date;

    ALTER TABLE public.pengguna
    ADD COLUMN no_telp numeric;

    ALTER TABLE public.pengguna
    ADD COLUMN distrik_id numeric;

    ALTER TABLE public.pengguna
    ADD COLUMN perusahaan_eksternal_id numeric;

    ALTER TABLE public.pengguna
    ADD COLUMN kode_distrik character varying(8) ;
    ALTER TABLE public.pengguna
    ADD COLUMN kode_blok character varying(8) ;
    ALTER TABLE public.pengguna
    ADD COLUMN kode_unit_m character varying(8) ;

    ALTER TABLE pengguna ADD CONSTRAINT pengguna_nid_u UNIQUE (nid);


    -- check dulu apakah ada data duplikat nid/username

    select nid, count(*)
    from pengguna
    group by nid
    HAVING count(*) > 1


    delete from pengguna pl
    where exists
    (
      select null
      from pengguna pl2
      where pl2.nid = pl.nid
      and pl2.ctid > pl.ctid
    )


    ALTER TABLE public.pengguna
    ADD COLUMN master_pass character varying ;

    ALTER TABLE pengguna ALTER COLUMN foto TYPE text;


    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('CI', 'Combustor Inspection');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('TI', 'Turbine Inspection');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('MI', 'Major Inspection');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('TO', 'Top Overhaul');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('SO', 'Semi Overhaul');
    
    INSERT INTO public.m_oh_type_lccm(
    oh_type, description)
    VALUES ('MO', 'Major Overhaul');


    INSERT INTO public.pengguna_modul(
    kode_modul, menu_modul, link_modul, group_modul, order_modul, level_modul)
    VALUES ('0902', 'Project', 'project', 'DASHBOARD', 3, '09');



    CREATE FUNCTION public.pr_lccm_status_p()
        RETURNS trigger
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE NOT LEAKPROOF
    AS $BODY$
    BEGIN 
       INSERT INTO
            t_project_lccm_status(kode_distrik,kode_blok,kode_unit_m,siteid,project_name,project_param)
            VALUES(new.kode_distrik,new.kode_blok,new.kode_unit_m,new.siteid,new.project_name,2);

               RETURN new;
    END;
    $BODY$;

    ALTER FUNCTION public.pr_lccm_status_p()
        OWNER TO postgres;


    CREATE TRIGGER pr_lccm_status_t
    AFTER INSERT
    ON public.t_lccm_prj
    FOR EACH ROW
    EXECUTE PROCEDURE public.pr_lccm_status_p();



CREATE OR REPLACE VIEW public.v_total_wo_pm
 AS
 SELECT pc.wo_pm,
        CASE
            WHEN pc.wo_pm = true THEN 'Valid'
            WHEN pc.wo_pm = false THEN 'Tidak Valid'
            ELSE '-'
        END AS info_nama,
    a.kode_distrik,
    a.distrik_info,
    a.kode_blok,
    a.blok_info,
    a.kode_unit,
    a.unit_info,
    a.pm_year,
    a.group_pm,
    a.total_tahun
   FROM ( SELECT b.kode_distrik,
            c.nama AS distrik_info,
            b.kode_blok,
            d.nama AS blok_info,
            b.kode_unit,
            d.nama AS unit_info,
            a_1.pm_year,
            b.group_pm,
            sum(a_1.pm_in_year) AS total_tahun
           FROM t_wo_pm_lccm a_1
             LEFT JOIN m_asset_lccm b1 ON btrim(b1.assetnum) = btrim(a_1.assetnum)
             LEFT JOIN distrik c ON c.kode = b1.kode_distrik
             LEFT JOIN blok_unit d ON d.kode = b1.kode_blok AND d.distrik_id = c.distrik_id
             LEFT JOIN unit_mesin e ON e.kode = b1.kode_unit_m AND e.blok_unit_id = d.blok_unit_id AND e.distrik_id = c.distrik_id
             LEFT JOIN m_group_pm__lccm b ON b.kode_distrik = c.kode AND b.kode_blok = d.kode AND b.kode_unit = e.kode
          WHERE 1 = 1
          GROUP BY a_1.pm_year, b.group_pm, b.kode_distrik, b.kode_blok, b.kode_unit, c.nama, d.nama) a
     LEFT JOIN t_preperation_lccm pc ON pc.year_lccm = a.pm_year AND pc.kode_distrik = a.kode_distrik AND pc.kode_blok = a.kode_blok AND pc.kode_unit_m = a.kode_unit
  WHERE 1 = 1;

ALTER TABLE public.v_total_wo_pm
    OWNER TO postgres;



CREATE OR REPLACE VIEW public.v_total_wo_pdm
 AS
 SELECT pc.wo_pdm,
        CASE
            WHEN pc.wo_pdm = true THEN 'Valid'
            WHEN pc.wo_pdm = false THEN 'Tidak Valid'
            ELSE '-'
        END AS info_nama,
    a.kode_distrik,
    a.distrik_info,
    a.kode_blok,
    a.blok_info,
    a.kode_unit,
    a.unit_info,
    a.pdm_year,
    a.group_pm,
    a.total_tahun
   FROM ( SELECT b.kode_distrik,
            c.nama AS distrik_info,
            b.kode_blok,
            d.nama AS blok_info,
            b.kode_unit,
            d.nama AS unit_info,
            a_1.pdm_year,
            b.group_pm,
            sum(a_1.pdm_in_year) AS total_tahun
           FROM t_wo_pdm_lccm a_1
             LEFT JOIN m_asset_lccm b1 ON btrim(b1.assetnum) = btrim(a_1.assetnum)
             LEFT JOIN distrik c ON c.kode = b1.kode_distrik
             LEFT JOIN blok_unit d ON d.kode = b1.kode_blok AND d.distrik_id = c.distrik_id
             LEFT JOIN unit_mesin e ON e.kode = b1.kode_unit_m AND e.blok_unit_id = d.blok_unit_id AND e.distrik_id = c.distrik_id
             LEFT JOIN m_group_pm__lccm b ON b.kode_distrik = c.kode AND b.kode_blok = d.kode AND b.kode_unit = e.kode
          WHERE 1 = 1
          GROUP BY a_1.pdm_year, b.group_pm, b.kode_distrik, b.kode_blok, b.kode_unit, c.nama, d.nama) a
     LEFT JOIN t_preperation_lccm pc ON pc.year_lccm = a.pdm_year AND pc.kode_distrik = a.kode_distrik AND pc.kode_blok = a.kode_blok AND pc.kode_unit_m = a.kode_unit
  WHERE 1 = 1;

ALTER TABLE public.v_total_wo_pdm
    OWNER TO postgres;
    
    

